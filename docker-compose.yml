version: '3.7'

services:
  db:
    ports:
      - "5432:5432"
    image: postgres:latest
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=p
    healthcheck:
      test: "pg_isready -h localhost -p 5432 -U postgres"
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 30s
  kafka:
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.5
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://kafka:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://kafka:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr kafka:33145
      - --advertise-rpc-addr kafka:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    ports:
      - "9092:9092"
    networks:
      ssu-mgmt-development:
        aliases:
          - kafka
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.8.2
    networks:
      ssu-mgmt-development:
        aliases:
          - redpanda-console
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console -config.filepath=${CONFIG_FILEPATH:-/tmp/config.yml}'
    volumes:
      - ./redpanda-config:/tmp/config/
    environment:
      CONFIG_FILEPATH: ${CONFIG_FILEPATH:-/tmp/config.yml}
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://kafka:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://kafka:9644"]
    ports:
      - 7080:8080
    depends_on:
      - kafka
volumes:
  db-data:
networks:
  ssu-mgmt-development:
    name: ssu-mgmt-development
    labels:
      cloud.dfds.dev-build: true